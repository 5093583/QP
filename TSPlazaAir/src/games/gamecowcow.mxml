<?xml version="1.0" encoding="utf-8"?>
<base:GameBaseModule xmlns:fx="http://ns.adobe.com/mxml/2009" 
					 xmlns:s="library://ns.adobe.com/flex/spark" 
					 xmlns:mx="library://ns.adobe.com/flex/mx" 
					 xmlns:base="base.*"
					 creationComplete="gamebasemodule1_creationCompleteHandler(event)"
					 implements="base.IModuleGame"
					 horizontalCenter="0" verticalCenter="0"
					 maxWidth="1300" maxHeight="900"
					 width="800" height="600" 
					 xmlns:cowcow="games.cowcow.*" xmlns:com="com.*">
	<fx:Script>
		<![CDATA[
			import base.StaticVars;
			
			import com.CardImage;
			import com.MCButton;
			import com.greensock.TweenMax;
			import com.plaza.MsgManager;
			
			import cx.gamebase.Interface.IUserViewSink;
			import cx.gamebase.enum.enTimeType;
			import cx.gamebase.events.GameEvent;
			import cx.gamebase.model.GameUserModel;
			import cx.gamebase.sturuct.GameCmd;
			import cx.gamebase.sturuct.tagServerTimer;
			import cx.net.Interface.IClientSocket;
			
			import gameAssets.card.YBCardEmbed;
			import gameAssets.chip.YBChipEmbed;
			import gameAssets.cow.CowcowSkinClass;
			
			import games.cowcow.enum.enTimer;
			import games.cowcow.model.CCModel;
			import games.cowcow.struct.CMD_C_AddScore;
			import games.cowcow.struct.CMD_C_CallBanker;
			import games.cowcow.struct.CMD_C_OxCard;
			import games.cowcow.struct.CMD_S_AddScore;
			import games.cowcow.struct.CMD_S_CallBanker;
			import games.cowcow.struct.CMD_S_GameEnd;
			import games.cowcow.struct.CMD_S_GameStart;
			import games.cowcow.struct.CMD_S_Open_Card;
			import games.cowcow.struct.CMD_S_PlayerExit;
			import games.cowcow.struct.CMD_S_SendCard;
			import games.cowcow.struct.CMD_S_StatusCall;
			import games.cowcow.struct.CMD_S_StatusFree;
			import games.cowcow.struct.CMD_S_StatusPlay;
			import games.cowcow.struct.CMD_S_StatusScore;
			import games.cowcow.units.CowcowCMD;
			import games.cowcow.units.CowcowConst;
			
			import mx.core.BitmapAsset;
			import mx.events.FlexEvent;
			import mx.utils.ObjectUtil;
			
			import t.cx.air.TConst;
			import t.cx.air.TScore;
			import t.cx.air.controller.Controller;
			import t.cx.air.controller.TEvent;
			import t.cx.air.utils.Memory;
			
			public static const MASK_VALUE			: uint = 0x0F;								//数值掩码
			
			public static const OX_VALUE0			: uint = 0;									//混合牌型
			public static const OX_VALUE1			: uint = 1;									//牛一
			public static const OX_VALUE2			: uint = 2;									//牛二
			public static const OX_VALUE3			: uint = 3;									//牛三
			public static const OX_VALUE4			: uint = 4;									//牛四
			public static const OX_VALUE5			: uint = 5;									//牛五
			public static const OX_VALUE6			: uint = 6;									//牛六
			public static const OX_VALUE7			: uint = 7;									//牛七
			public static const OX_VALUE8			: uint = 8;									//牛八
			public static const OX_VALUE9			: uint = 9;									//牛九
			public static const OX_VALUE10			: uint = 10;								//牛牛
			public static const OX_FOURKING			: uint = 11;								//五花牛
			public static const OX_FOURSAME			: uint = 12;								//四炸
			
			
			private var _chipArrs : Array = new Array({x:280,y:-170},{x:-250,y:150},{x:80,y:300},{x:500,y:220});
			private var _chips : Array = [];
			
			private var _theModel : CCModel;
			private var _user:GameUserModel;
			
			private var _timer : Timer;
			
			private var _handCards : Array;
			
			private var _statusAry:Array = ['等待叫庄', '请下注', '等待玩家摊牌'];
			private var _chipBtnNumber : Array = [1,2,5,10,20];
			
			private var m_endData:CMD_S_GameEnd;
			
			private var theCellScore:Number;
			
			private var _addChipNum : Number = 0;
			
			private var firstTryPlay:Boolean = true;
			
			private var playerExit:Array = [];
			
			private var _endGame:Boolean = false;
			
			private var _myBool:Boolean =false;
			private var _myIndex:int = 0;
			private var _myArray:Array = [];
			private var _indexMy:int = 0;
//			[Embed(source="gameAssets/clockNum.png")]
//			public var clock_num:Class;
//			private var _clockNum:BitmapData;
			private var statusIndex:int = 255;
			protected function gamebasemodule1_creationCompleteHandler(event:FlexEvent):void
			{
				_handCards = Memory._newTwoDimension(4,5,null);
				
				theuser.addEventListener( 'userLeave_notStart', userLeaveHandler);
				
				if(!ui_clock.numChildren)
					ui_clock.addChild(CowcowSkinClass.GetClock());
//				_clockNum = BitmapAsset(new clock_num() ).bitmapData;
			}
//			private function getClockNum(val:int):BitmapData
//			{
//				var bitmap:BitmapData = new BitmapData(55, 49, true, 0xffffff);
//				var num:int;
//				if(_clockNum == null)
//					_clockNum = BitmapAsset(new clock_num() ).bitmapData;
//				if(val>9)
//				{
//					num = parseInt(val.toString().charAt(1));
//					bitmap.copyPixels(_clockNum, new Rectangle(num*31, 0, 32, 49), new Point(24, 0));
//					num = parseInt(val.toString().charAt(0));
//					bitmap.copyPixels(_clockNum, new Rectangle(num*31, 0, 32, 49), new Point(0, 0));
//				}
//				else
//				{
//					num = parseInt(val.toString().charAt(0));
//					bitmap.copyPixels(_clockNum, new Rectangle(num*31, 0, 32, 49), new Point(12, 0));
//				}
//				return bitmap;
//			}
			private function userLeaveHandler(e:Event):void
			{
				if(btn_continue && !btn_continue.visible)
					btn_continue.visible = true;
				
				HideButton();
				
				TweenMax.delayedCall(StaticVars.delayedExitGame, exitGame);
				
				MsgManager.getInstance().showMessage1('游戏玩家已退出，请点击开始继续游戏！');
			}
			
			
			
			override protected function OnPreInit():Boolean
			{
				_theModel = CCModel._getInstance();
				_user	  = GameUserModel.GetInstance();
				_addChipNum = _theModel.m_lTurnLessScore;
				return true;
			}
			override protected function OnInit():Boolean
			{
				if( !super.OnInit() ) return false;
				//设置用户回调钩子
				_theModel.m_User.SetUserViewSink(theuser as IUserViewSink);
				//初始化游戏服务配置
				_theModel.m_Attribute.playerCount = CowcowConst.GAME_PLAYER;
				
				//开始加载音效
				_theModel.m_Sound.StartLoad('data/sound/cowcow_sound' + (TConst.TC_DEUBG == 1?'.swf':'.cxm'));
				return true;
			}
			
			public function logonSuccess():void
			{
				if(theuser)	theuser.init();
				super.addToStage();
			}
			
			public function updateGameNum():void
			{
				//				if(theServerNum)
				//					theServerNum.text	= '牌局:' + StaticVars.szGameNum;
			}
			
			override protected function OnSoundLoadComplete(e : TEvent) : void
			{
				super.OnSoundLoadComplete(e);
			}
			
			
			
			
			//退出游戏
			override protected function OnSubExitGame() : Boolean
			{
				TweenMax.killAll();
				onDestroyAllDos();
				return true;
			}
			
			override protected function OnGameFrameScene(pBuffer:ByteArray, wDataSize:int, pIClientSocket:IClientSocket):Boolean
			{
				super.OnGameFrameScene(pBuffer,wDataSize,pIClientSocket);
				Controller.dispatchEvent(GameEvent.GAME_LEAVE_ENABLE,0);
				var i : uint = 0;
				switch(_theModel.m_bGameStatus)
				{
					case CowcowConst.GS_TK_FREE:
					{
						var StatusFree : CMD_S_StatusFree = CMD_S_StatusFree._readBuffer(pBuffer);
						theCellScore = StatusFree.lCellScore;
						
						StaticVars.isTryPlayed = StatusFree.cbIsTryPlay == 1?true:false;
						
						if(firstTryPlay && StaticVars.isTryPlayed)
						{
							firstTryPlay = false;
							StaticVars.tryPlayScore= StatusFree.lTryPlayScore;
							theuser.UpdateGameScore(StaticVars.tryPlayScore, 2);
							
							if(StaticVars.isTryPlayed)
								MsgManager.getInstance().showMessage1('您当前进入的是试玩房间，只为体验游戏而设，输赢金额不参与房间外结算！');
						}
						if(StaticVars.isTryPlayed)
						{
							tryplay.visible = true;
							//							tryplay1.visible= true;
						}
						
						return true;
					}
					case CowcowConst.GS_TK_CALL:
					{
						var RecvCallBanker : CMD_S_StatusCall = CMD_S_StatusCall._readBuffer(pBuffer);
						_theModel.m_lTurnLessScore = RecvCallBanker.lCellScore;
						theCellScore = RecvCallBanker.lCellScore;
						theServerName.text 	= TScore.toFloatEx(theCellScore).toString();//StaticVars.serverName;
						//	theServerNum.text	= '牌局:' + StaticVars.szGameNum;
						_endGame = false;
						
						StaticVars.isTryPlayed = RecvCallBanker.cbIsTryPlay == 1?true:false;
						
						if(firstTryPlay && StaticVars.isTryPlayed)
						{
							tryplay.visible = true;
							//							tryplay1.visible= true;
							firstTryPlay = false;
							StaticVars.tryPlayScore= RecvCallBanker.lTryPlayScore;
							theuser.UpdateGameScore(StaticVars.tryPlayScore, 2);
							
							//if(StaticVars.isTryPlayed)
							//MsgManager.getInstance().showMessage1('您当前进入的是试玩房间，只为体验游戏而设，输赢金额不参与房间外结算！');
						}
						if(StaticVars.isTryPlayed)
						{
							tryplay.visible = true;
							//							tryplay1.visible= true;
						}
						
						return true;
					}
					case CowcowConst.GS_TK_SCORE:
					{
						var RecvSore : CMD_S_StatusScore = CMD_S_StatusScore._readBuffer(pBuffer);
						
						_theModel.m_lTurnLessScore = RecvSore.lTurnCellScore;
						_theModel.m_Banker = RecvSore.wBankerUser;
						_endGame = false;
						
						var zhuang:uint					= _theModel.m_User.SwitchViewChairID(RecvSore.wBankerUser);
						updateZhuang(zhuang);
						theCellScore = RecvSore.lTurnCellScore;
						for(i = 0;i<CowcowConst.GAME_PLAYER;i++)
						{
							if(RecvSore.cbPlayStatus[i] != 0)
							{
								AddScore(_theModel.m_User.SwitchViewChairID(i),RecvSore.lTableScore[i]);
								_theModel.m_lTotalScore += RecvSore.lTableScore[i];
								if( i == _theModel.m_User.GetMeChairID())
								{
									if(RecvSore.lTableScore[i] != 0)
									{
										if(StaticVars.isTryPlayed)
										{
											StaticVars.tryPlayScore -= RecvSore.lTableScore[i];
											theuser.UpdateGameScore(StaticVars.tryPlayScore, 2);
										}
										else
											Controller.dispatchEvent(GameEvent.USER_GAME_SCORE,0,i,_theModel.m_User.GetSelfData().UserScoreInfo.lScore - RecvSore.lTableScore[i]);
										//										Controller.dispatchEvent(GameEvent.USER_GAME_SCORE,0,i,_theModel.m_User.GetSelfData().UserScoreInfo.lScore - RecvSore.lTableScore[i]); 
									}
								}
							}
						}
						
						theServerName.text 	= TScore.toFloatEx(theCellScore).toString();//StaticVars.serverName;
						//theServerNum.text	= '牌局:' + StaticVars.szGameNum;
						
						StaticVars.isTryPlayed = RecvSore.cbIsTryPlay == 1?true:false;
						
						if(firstTryPlay && StaticVars.isTryPlayed)
						{
							tryplay.visible = true;
							//							tryplay1.visible= true;
							firstTryPlay = false;
							StaticVars.tryPlayScore= RecvSore.lTryPlayScore;
							theuser.UpdateGameScore(StaticVars.tryPlayScore, 2);
							
							//if(StaticVars.isTryPlayed)
							//MsgManager.getInstance().showMessage1('您当前进入的是试玩房间，只为体验游戏而设，输赢金额不参与房间外结算！');
						}
						if(StaticVars.isTryPlayed)
						{
							tryplay.visible = true;
							//							tryplay1.visible= true;
						}
						
						return true;
					}
					case CowcowConst.GS_TK_PLAYING:
					{
						var RecvPlay : CMD_S_StatusPlay = CMD_S_StatusPlay._readBuffer(pBuffer);
						_theModel.m_lTurnLessScore = RecvPlay.lCellScore;
						_theModel.m_Banker = RecvPlay.wBankerUser;
						_endGame = false;
						
						var zhuang1:uint					= _theModel.m_User.SwitchViewChairID(RecvPlay.wBankerUser);
						updateZhuang(zhuang);
						theCellScore = RecvPlay.lCellScore;
						
						var cards : Array = Memory._newTwoDimension(4,5,0);
						Memory._copyArray(cards[_theModel.m_User.GetMeChairID()],RecvPlay.cbHandCardData,5);
						SendCards(cards,false);
						for(i = 0;i<CowcowConst.GAME_PLAYER;i++)
						{
							if(RecvPlay.cbPlayStatus[i] != 0)
							{
								AddScore(_theModel.m_User.SwitchViewChairID(i),RecvPlay.lTableScore[i]);
								_theModel.m_lTotalScore += RecvPlay.lTableScore[i];
								
								if( RecvPlay.bOxCard[i] <= 0xff )
								{
									_theModel.RecordOpenCard(_theModel.m_User.SwitchViewChairID(i),RecvPlay.bOxCard[i],cards[i]);
									if(_theModel.m_User.SwitchViewChairID(i)!=2)
										this['showCard'+_theModel.m_User.SwitchViewChairID(i)].visible = true;
								}
							}
							if( i == _theModel.m_User.GetMeChairID() )
							{
								if(RecvPlay.lTableScore[i] != 0)
								{
									if(StaticVars.isTryPlayed)
									{
										StaticVars.tryPlayScore -= RecvPlay.lTableScore[i];
										theuser.UpdateGameScore(StaticVars.tryPlayScore, 2);
									}
									else
										Controller.dispatchEvent(GameEvent.USER_GAME_SCORE,0,i,_theModel.m_User.GetSelfData().UserScoreInfo.lScore - RecvPlay.lTableScore[i]); 
									//									Controller.dispatchEvent(GameEvent.USER_GAME_SCORE,0,i,_theModel.m_User.GetSelfData().UserScoreInfo.lScore - RecvPlay.lTableScore[i]); 
								}
							}
						}
						
						theServerName.text 	= TScore.toFloatEx(theCellScore).toString();//StaticVars.serverName;
						//	theServerNum.text	= '牌局:' + StaticVars.szGameNum;
						
						StaticVars.isTryPlayed = RecvPlay.cbIsTryPlay == 1?true:false;
						
						if(firstTryPlay && StaticVars.isTryPlayed)
						{
							tryplay.visible = true;
							//							tryplay1.visible= true;
							firstTryPlay = false;
							StaticVars.tryPlayScore= RecvPlay.lTryPlayScore;
							theuser.UpdateGameScore(StaticVars.tryPlayScore, 2);
							
							//if(StaticVars.isTryPlayed)
							//MsgManager.getInstance().showMessage1('您当前进入的是试玩房间，只为体验游戏而设，输赢金额不参与房间外结算！');
						}
						if(StaticVars.isTryPlayed)
						{
							tryplay.visible = true;
							//							tryplay1.visible= true;
						}
						
						return true;
					}
				}
				return false;
			}
			
			override protected function OnTcpGameEvent(wSubCmd : uint,pBuffer : ByteArray,wDataSize : int,pIClientSocket:IClientSocket) : Boolean
			{
				if(super.OnTcpGameEvent(wSubCmd,pBuffer,wDataSize,pIClientSocket)) return true;
				switch(wSubCmd)
				{
					case CowcowCMD.SUB_S_CALL_BANKER:			//叫庄
					{
						Controller.dispatchEvent(GameEvent.GAME_LEAVE_ENABLE,0);
						_theModel.m_gameStart = true;
						
						playerExit = [];
						_endGame = false;
						
						var RecvBanker : CMD_S_CallBanker = CMD_S_CallBanker._readBuffer(pBuffer);
						setGameStatus(0);
						_theModel.m_zhuangArray[_theModel.m_User.SwitchViewChairID(RecvBanker.wCallBanker)] = RecvBanker.bBanker;
						if(RecvBanker.wCallBanker == _theModel.m_User.GetMeChairID())
						{
							HideButton();
							OnDestroyOnline();
						}
						theServerName.text =  TScore.toFloatEx(theCellScore).toString();//StaticVars.serverName;
						//	theServerNum.text	= '牌局:' + StaticVars.szGameNum;
						
						//cow_rollText.playedRollText();
						
						return true;					
					}
					case CowcowCMD.SUB_S_GAME_START:			//游戏开始
					{
						HideButton();
						//						_theModel.m_Sound.PlayEffect(TConst.INVALID_CHAIR,'kaishi');
						playSoundEffect(TConst.INVALID_CHAIR,'gamestart');
						var RecvStart : CMD_S_GameStart = CMD_S_GameStart._readBuffer(pBuffer);
						_theModel.m_Banker = RecvStart.wBankerUser;
						_theModel.m_upperLimit = RecvStart.lTurnMaxScore;	//最大下注
						_theModel.m_lTurnLessScore = RecvStart.lTurnCellScore;	//单元下注
						//						_fd.text = '牛牛 (封顶' + TScore.toStringEx(_theModel.m_upperLimit) + ')';
						
						var zhuang:uint = _theModel.m_User.SwitchViewChairID(RecvStart.wBankerUser);
						updateZhuang(zhuang);
						_zhuang.visible = false;
						setGameStatus(1);
						
						StaticVars.isPlayedWithFriend = true;
						
						return true;
					}
					case CowcowCMD.SUB_S_ADD_SCORE:			//加注结果
					{
						//	trace('加注结果 → : SUB_S_ADD_SCORE');
						var RecvScore : CMD_S_AddScore  = CMD_S_AddScore._readBuffer(pBuffer);
						AddScore(_theModel.m_User.SwitchViewChairID(RecvScore.wAddScoreUser),RecvScore.lAddScoreCount);
						if(RecvScore.wAddScoreUser == _theModel.m_User.GetMeChairID())
						{
							if(StaticVars.isTryPlayed)
							{
								StaticVars.tryPlayScore -= RecvScore.lAddScoreCount;
								theuser.UpdateGameScore(StaticVars.tryPlayScore, 2);
							}
							else
								Controller.dispatchEvent(GameEvent.USER_GAME_SCORE,0,RecvScore.wAddScoreUser,_theModel.m_User.GetSelfData().UserScoreInfo.lScore - RecvScore.lAddScoreCount); 
							//							Controller.dispatchEvent(GameEvent.USER_GAME_SCORE,0,RecvScore.wAddScoreUser,_theModel.m_User.GetSelfData().UserScoreInfo.lScore - RecvScore.lAddScoreCount); 
							OnDestroyOnline();
						}
						if(RecvScore.wAddScoreUser == _theModel.m_User.GetMeChairID()) { HideButton(); }
						_theModel.m_lTotalScore += RecvScore.lAddScoreCount;
						return true;
					}
					case CowcowCMD.SUB_S_PLAYER_EXIT:	//用户强退
					{
						var RecvPlayerExit : CMD_S_PlayerExit = CMD_S_PlayerExit._readBuffer(pBuffer);
						playerExit.push(RecvPlayerExit.wPlayerID);
						return true;
					}
					case CowcowCMD.SUB_S_SEND_CARD:  	//发牌消息
					{
						var RecvCard : CMD_S_SendCard = CMD_S_SendCard._readBuffer(pBuffer);
						
						SendCards(RecvCard.cbCardData);
						return true;
					}
					case CowcowCMD.SUB_S_OPEN_CARD:			//用户摊牌
					{
						TweenMax.killAll();
						var RecvOpen : CMD_S_Open_Card = CMD_S_Open_Card._readBuffer(pBuffer);
						var wViewChairID : uint = _theModel.m_User.SwitchViewChairID(RecvOpen.wChairID);
						_theModel.RecordOpenCard(wViewChairID,RecvOpen.bOX,RecvOpen.cbCardData);
						if(RecvOpen.wChairID == _theModel.m_User.GetMeChairID()) 
						{
							HideButton();
							OnDestroyOnline();
						}
						if(wViewChairID!=2)
							this['showCard'+wViewChairID].visible = true;
						return true;
					}
						
					case CowcowCMD.SUB_S_GAME_END:		//游戏结束
					{
						if(_chips != null)
						{
							for each(var chip : DisplayObject in _chips)
							{
								TweenMax.to(chip,0.3,{delay:0.1,x:180,y:100,onComplete:removeChip,onCompleteParams:[chip]});
							}
						}
						Controller.dispatchEvent(GameEvent.GAME_LEAVE_ENABLE,1);
						m_endData = CMD_S_GameEnd._readBuffer(pBuffer);
						if(_theModel.m_RecordArrs != null || _theModel.m_RecordOX != null)
						{
							ShowOX(_theModel.m_RecordArrs,_theModel.m_RecordOX);
						}
						ShowScore();
						_endGame = true;
						
						var bAllWin : int = 0;
						var bAllLost : int = 0;
						for(var i : uint = 0;i<4;i++)
						{
							if(i != _theModel.m_Banker && m_endData.lGameScore[i] > 0)
							{
								bAllLost++;
							}else if(i != _theModel.m_Banker && m_endData.lGameScore[i] < 0)
							{
								bAllWin++;
							}
						}
						if(m_endData.lGameScore[_theModel.m_Banker] < 0)
						{
							AppendChip(_theModel.m_User.SwitchViewChairID(_theModel.m_Banker),m_endData.lGameScore[_theModel.m_Banker]);
						}
						if(m_endData.lGameScore[_theModel.m_User.GetMeChairID()] != 0) 	
						{
							if(StaticVars.isTryPlayed)
							{
								StaticVars.tryPlayScore += m_endData.lGameScore[_theModel.m_User.GetMeChairID()];
								if(gp_add2.visible)
									StaticVars.tryPlayScore += TScore.parseFloatEx(AddTxt_2.text);
								
								theuser.UpdateGameScore(StaticVars.tryPlayScore, 2);
							}
							else
							{
								var score:Number = _theModel.m_User.GetSelfData().UserScoreInfo.lScore;
								score += m_endData.lGameScore[_theModel.m_User.GetMeChairID()];
								if(gp_add2.visible)
									score += TScore.parseFloatEx(AddTxt_2.text);
								theuser.UpdateGameScore(score, 2);
							}
						}
						
						
						gp_type.visible = false;
						showCard0.visible = false;
						showCard1.visible = false;
						showCard3.visible = false;
						gp_add0.visible = false;
						gp_add1.visible = false;
						gp_add2.visible = false;
						gp_add3.visible = false;
						HideButton();
						
						
						//						if(bAllWin >= 3)
						//						{
						////							_theModel.m_Sound.PlayEffect(TConst.INVALID_CHAIR,'win');
						//							playSoundEffect(TConst.INVALID_CHAIR,'win');
						//						}else if( bAllLost>= 3 ){
						////							_theModel.m_Sound.PlayEffect(TConst.INVALID_CHAIR,'lost');
						//							playSoundEffect(TConst.INVALID_CHAIR,'lost');
						//						}
//						TweenMax.delayedCall(2,GameEndSoundPlay);
						gp_status.visible = false;
						
						var showContinueButton:Function = function():void
						{
							btn_continue.visible = true;
						}
						TweenMax.delayedCall(1.5, showContinueButton);
						
						OnDestroyOnline();
						
						TweenMax.delayedCall(StaticVars.delayedExitGame, exitGame);
						
						return true;
					}
				}
				return false;
			}
			override protected function OnGameTimerEvent(pTimer : tagServerTimer) : Boolean
			{
				var bShow : Boolean = pTimer.bTimerType == enTimeType.TT_SHOW;
				
				switch(pTimer.bTimerKind)
				{
					case enTimer.TK_CALLBANK:
					{
						if(bShow) {
							statusIndex = 1;
							//显示叫庄状态
							StartClock(pTimer.wChairID,pTimer.lTimer);
							//显示叫庄按钮
							ShowButton1(1);
							SendOnLine(pTimer.lTimer);	
						}
						return true;
					}
					case enTimer.TK_TURNSCORE:
					{
						if(bShow)
						{
							statusIndex = 255;
							_zhuang.visible = true;
							setGameStatus(1);
							StartClock(TConst.INVALID_CHAIR,pTimer.lTimer);
							if(_theModel.m_Banker != _theModel.m_User.GetMeChairID()) {
								ShowButton2(_theModel.m_lTurnLessScore);
								SendOnLine(pTimer.lTimer);
							}
						}
						return true;
					}
					case enTimer.TK_OPENCARD:
					{
						if(bShow)
						{
							statusIndex = 255;
							if(_theModel.m_RecordOX[_theModel.m_User.GetMeChairID()] == 0xff)
							{
								setGameStatus(2);
								StartClock(TConst.INVALID_CHAIR,pTimer.lTimer);
								ShowButton1(2);
								SendOnLine(pTimer.lTimer);
							}
						}
						return true;
					}
					case enTimer.TK_CONTINUE:
					{
						if(bShow)
						{ 
							statusIndex = 255;
							StartClock(TConst.INVALID_CHAIR,pTimer.lTimer); 
						}
						return true;
					}
					case enTimer.TK_ONPLAYERCALL:
					{
						if(bShow)
						{
							statusIndex = 255;
							gp_status.visible = false;
							var index:int = 0;
							var wZhuang:int = 255;
							for(var i:int = 0;i<4;i++)
							{
								if(_theModel.m_zhuangArray[i] == 1)
								{
									index++;
									wZhuang = i;
								}
							}
							switch(index)
							{
								case 0:
								{
									playRandomZhuang(0);
									break;
								}
								case 1:
								{
									var zhuang:uint	= wZhuang;
									updateZhuang(zhuang);
									break;
								}
								case 2:
								case 3:
								case 4:
								{
									playRandomZhuang(1);
									break;
								}	
							}
						}
						return true;
					}
				}
				return false;
			}
			
			private function exitGame():void
			{
				Controller.dispatchEvent('gameModuleExit');
				
				MsgManager.getInstance().showMessage1('由于您长时间未参与游戏！系统自动返回大厅！');
			}
			
			private function playRandomZhuang(type : uint):void
			{
				_nozhuang.source = type==0?CowcowSkinClass.noZhuang:CowcowSkinClass.duoZhuang;
				
				_nozhuang.visible = true;
				_zhuang.visible = false;
				
				var f:Function = function():void
				{
					_nozhuang.visible = false;
					_zhuang.visible = true;
					var zhuang:uint	= _theModel.m_User.SwitchViewChairID(_theModel.m_Banker);
					updateZhuang(zhuang);
				};
				TweenMax.delayedCall(2, f);
				
				var ary:Array = getPlayerArray();
				
				var timer:Timer = new Timer(200);
				var i:int = 0;
				var timerFunc:Function = function(e:TimerEvent):void
				{
					if(!_nozhuang.visible)
					{
						timer.stop();
						timer.removeEventListener(TimerEvent.TIMER, timerFunc);
					}
					else
					{
						if(type == 0)
							updateZhuang(ary[i]);
						else
						{
							if(_theModel.m_zhuangArray[i] == 1)
							{
								updateZhuang(ary[i]);
							}
						}
						i++;
						if(i>=ary.length)	i=0;
					}
					//					_theModel.m_Sound.PlayEffect(TConst.INVALID_CHAIR,'SendCard');
					playSoundEffect(TConst.INVALID_CHAIR,'sendcard');
				};
				timer.addEventListener(TimerEvent.TIMER, timerFunc);
				timer.start();
			}
			
			
			private function getPlayerArray():Array
			{
				var ary:Array = [];
				var wViewChairID:int;
				for(var i : uint = 0;i<4;i++)
				{
					wViewChairID = _theModel.m_User.SwitchViewChairID(i);
					if( CCModel._getInstance().m_PlayerInfo[wViewChairID] != 0 )
						ary.push(wViewChairID);
				}
				ary.sort(16);
				return ary;
			}
			
			
			public function ShowOX(RecordArrs : Array,RecordOX : Array) : void
			{
				if(RecordArrs == null)	RecordArrs = Memory._newTwoDimension(4,5,0);
				
				var wViewChairID : uint = 0;
				var card : CardImage;
				var types : Array = ['没牛','牛一','牛二','牛三','牛四','牛五','牛六','牛七','牛八','牛九','牛牛','五花牛','四炸'];
				for(var i : uint = 0;i<4;i++)
				{
					wViewChairID =  CCModel._getInstance().m_User.SwitchViewChairID(i);
					
					if(CCModel._getInstance().m_PlayerInfo[wViewChairID] == 0) continue;
					if(types[ RecordOX[wViewChairID] ] != null)
					{
						this['type' + wViewChairID].source = CowcowSkinClass.GetCowType(RecordOX[wViewChairID]);
						this['type' + wViewChairID].visible = true;
						
						if( playerExit.indexOf(i) != -1 )
						{
							this['type' + wViewChairID].visible = false;
						}
						
						if(RecordOX[wViewChairID] > 0)
						{
							if(wViewChairID == 2)
								upNoticeCard( [ RecordArrs[wViewChairID][0], RecordArrs[wViewChairID][1] ]);
							else
								updateCowCardPostion(wViewChairID);
						}
						
					}
					else 
					{
						this['type' + wViewChairID].source = CowcowSkinClass.GetCowType(0);
					}
					if(wViewChairID == 2) {
						//						CCModel._getInstance().m_Sound.PlayEffect(i,'cow',RecordOX[wViewChairID]);
//						playSoundEffect(i,'cow',RecordOX[wViewChairID]);
						continue;
					}
					for(var j : uint = 0;j<5;j++)
					{
						if(wViewChairID == 2)	break;
						card = _handCards[wViewChairID][j];
						if(card != null) 
						{ 
							card.value = RecordArrs[wViewChairID][j]; 
							
							if( playerExit.indexOf(i) != -1 )
								card.value = 0;
						}
					}
				}
			}
			
			private function updateCowCardPostion(wViewChairID:uint):void
			{
				var card : CardImage;
				var j : uint = 0;
				var offx:int;
				var offy:int;
				if(wViewChairID == 0)
				{
					offx = -60;
					offy = 10;
				}
				else if(wViewChairID == 1)
				{
					offx = 10;
					offy = -60;
				}
				else if(wViewChairID == 3)
				{
					offx = -10;
					offy = -60;
				}
				for(j=0; j<2; j++)
				{
					card = _handCards[wViewChairID][j];
					if(card != null)
						updateCardPosition(card, wViewChairID, j, offx, offy);
				}
				for(j= 2;j<5;j++)
				{
					card = _handCards[wViewChairID][j];
					if(card != null)
						updateCardPosition(card, wViewChairID, (j-2) );
				}
			}
			
			public function ShowScore() : void
			{
				var wViewChairID : uint = 0;
				var color:uint;
				for(var i : uint = 0;i<4;i++)
				{
					wViewChairID = CCModel._getInstance().m_User.SwitchViewChairID(i);
					if(CCModel._getInstance().m_PlayerInfo[wViewChairID] != 0)
					{
						if(wViewChairID == 2)
						{
							if(m_endData.lGameScore[i]>0)
							{
								//								CCModel._getInstance().m_Sound.PlayEffect(TConst.INVALID_CHAIR,'win');
								playSoundEffect(TConst.INVALID_CHAIR,'win');
							}else {
								//								CCModel._getInstance().m_Sound.PlayEffect(TConst.INVALID_CHAIR,'lost');
								playSoundEffect(TConst.INVALID_CHAIR,'lost');
							}
						}
						
						color = (m_endData.lGameScore[i] > 0?0xFF962D:0xD2E9DF);
						
						this['gp_score'+wViewChairID].visible = true;
						
						this['score_' + wViewChairID].setStyle('color', color);
						this['score_' + wViewChairID].text = (m_endData.lGameScore[i] > 0?'+':'') + TScore.toStringEx(m_endData.lGameScore[i]);
					}
				}
				
				TweenMax.delayedCall(.5,destroyChips);
			}
			
			
			private function playSoundEffect(wChairID : uint,action : String, type : int=-1,value : int=-1,rand : int = -1):void
			{
				if(_theModel == null)	return;
				try
				{
					_theModel.m_Sound.PlayEffect(wChairID, action, type, value, rand);
				}
				catch(e:Error){};
			}
			
			public function AddScore(wViewChairID : uint,fScore : Number) : void
			{
				if(wViewChairID > 3) return;
				if(fScore > 0)
				{
					this['gp_add'  + wViewChairID].visible = true;
					this['AddTxt_' + wViewChairID].text = TScore.toStringEx(fScore);
				}
				
				
				AppendChip(fScore, wViewChairID);
			}
			
			private function AppendChip(count : Number,wChairID : uint) : void
			{
				if(wChairID > CowcowConst.GAME_PLAYER) return;
				var rands : Array  = YBChipEmbed.GetChips(TScore.toFloatEx(count));
				for(var i : uint=0;i<rands.length;i++)
				{
					switch(wChairID)
					{
						case 0:
						{
							rands[i].x = 110;
							rands[i].y = -10 - i*4;
							break;
						}
						case 1:
						{
							rands[i].x = -190;
							rands[i].y = 175 - i*4;;
							break;
						}
						case 2:
						{
							rands[i].x = 110;
							rands[i].y = 185 - i*4;
							break;
						}
						case 3:
						{
							rands[i].x = 370;
							rands[i].y = 175 - i*4;
							break;
						}	
					}
					TweenMax.from(rands[i],0.3,{x:_chipArrs[wChairID].x,y:_chipArrs[wChairID].y});
					_chipUI.addChild(rands[i]);
				}
				
				//				_theModel.m_Sound.PlayEffect(TConst.INVALID_CHAIR,'jiazhu');
				playSoundEffect(TConst.INVALID_CHAIR,'xiazhu');
				_chips = _chips.concat(rands);
			}
			
			private function destroyChips():void
			{
				if(_chips == null) return; 
				var i:uint;
				var wViewChairID : uint;
				for(i = 0;i<m_endData.lGameScore.length;i++)
				{
					if(m_endData.lGameScore[i] > 0)
					{
						var indexX:int = 0;
						var indexY:int = 0;
						wViewChairID = _theModel.m_User.SwitchViewChairID(i);
						var rands : Array  = YBChipEmbed.GetChips(TScore.toFloatEx(m_endData.lGameScore[i]));
						for(var j:uint=0;j<rands.length;j++)
						{
							rands[j].x = 180;
							rands[j].y = 100;
							switch(wViewChairID)
							{
								case 0:{indexX=110;indexY=-10-j*4;break;}
								case 1:{indexX=-190;indexY=175-j*4;break;}
								case 2:{indexX=110;indexY=185-j*4;break;}
								case 3:{indexX=370;indexY=175-j*4;break;}
							}
							TweenMax.to(rands[j],0.5,{x:indexX,y:indexY});
							_chipUI.addChild(rands[j]);
						}
//						for each(var chip : DisplayObject in _chips)
//						{
//							TweenMax.to(chip,0.6,{delay:0.6,x:_chipArrs[wViewChairID].x,y:_chipArrs[wViewChairID].y,onComplete:removeChip,onCompleteParams:[chip]});
//						}
//						break;
						_chips = _chips.concat(rands);
					}
				}
				if(_chips != null)
				{
					for each(var chip : DisplayObject in _chips)
					{
						TweenMax.delayedCall(2,removeChip,[chip]);
					}
					playSoundEffect(TConst.INVALID_CHAIR,'GameEnd1');
				}
//				if(rands != null)
//				{
//					for(i = 0;i<rands.length;i++)
//					{
//						TweenMax.delayedCall(1,removeChip,[rands[i]]);
//					}
//				}
			}
			
			private function removeChip(dos : DisplayObject) : void
			{
				if(dos == null) return;
				if(_chipUI.contains(dos)) { _chipUI.removeChild(dos); }
				dos = null;
			}
			
			public function SendCards(arrs : Array,bAn : Boolean = true) : void
			{
				var wViewChairID : uint = 0;
				var pUser : GameUserModel = CCModel._getInstance().m_User;
				var index : uint = 0;
				StopClock();
				gp_status.visible = false;
				for(var j : uint = 0;j<5;j++)
				{
					for(var i : uint = 0;i<4;i++)
					{
						wViewChairID = pUser.SwitchViewChairID(i);
						if( CCModel._getInstance().m_PlayerInfo[wViewChairID] != 0 )
						{
							var card : CardImage = new CardImage();
							card.source = YBCardEmbed.GetCard(0,78, 107, "b2");
							card.visible = false;
							card.value = 0;
							_handCards[wViewChairID][j] = card;
							card.x = gp_center.x;
							card.y = gp_center.y;
							this.addElement(card);
							
							if(bAn)
								TweenMax.delayedCall(i*.2+index*0.4,moveCard,[card, wViewChairID, j, arrs[i][j], true]);
							else
								moveCard(card,wViewChairID,j,arrs[i][j],false);
						}
					}
					index++;
				}
				
			}
			
			private function moveCard(card : CardImage, wViewChairID:uint, index:int, value:int, bPlay : Boolean = true) : void
			{
				card.visible = true;
				if(bPlay)
				{
					var gp:Group = this['gp_user' + wViewChairID];
					card.x = gp_center.x;
					card.y = gp_center.y;
					card.alpha = .5;
					//					_theModel.m_Sound.PlayEffect(TConst.INVALID_CHAIR,'SendCard');
					playSoundEffect(TConst.INVALID_CHAIR,'sendcard');
					TweenMax.to(card, .2, {x:gp.x, y:gp.y+8, alpha:1, visible:true, onComplete:completeMove,onCompleteParams:[card, wViewChairID, index, value]});
				}
				else
				{
					completeMove(card, wViewChairID, index, value);
				}
			}
			
			private function completeMove(target:CardImage, wViewChairID:uint, index:int, value:int):void
			{
				target.value = value;
				updateCardPosition(target, wViewChairID, index);
			}
			
			
			
			private function gettheCard(value:int, w:uint=78, h:uint=107, cardType:String="b2"):CardImage
			{
				var img:CardImage = new CardImage;
				img.source = YBCardEmbed.GetCard(value, w, h, cardType);
				img.name = value.toString();
				
				img.top 			= undefined;
				img.bottom 			= undefined;
				img.left 			= undefined;
				img.right 			= undefined;
				img.horizontalCenter= undefined;
				img.verticalCenter 	= undefined;
				img.visible = true;
				
				return img;
			}
			
			private function ShowButton1(index:uint) : void
			{
				HideButton();
				if(_endGame)	return;
				this['control' + index].visible = true;
			}
			private function ShowButton2(fScore : Number) : void
			{
				HideButton();
				if(_endGame)	return;
				control3.visible = true;
				control3_txt.text = '最大可下注：'+TScore.toStringEx(_theModel.m_upperLimit) + 
					' , 默认下注：'  + TScore.toStringEx(_theModel.m_lTurnLessScore);
				
				_addChipNum = _theModel.m_lTurnLessScore;
				
				var num : Number;
				for(var i : uint= 1;i < 6;i++)
				{
					num = fScore * _chipBtnNumber[i - 1];
					//					this['Add_' + i].lab_score.text = TScore.toStringEx(num).split('.')[0];
					this['Add_' + i].lab_score.text = getAddNumStr( TScore.toFloatEx(num) );
					
					if(num > _theModel.m_upperLimit)
					{
						this['Add_' + i].enabled = false;
					}else
					{
						this['Add_' + i].enabled = true ;
						this['Add_' + i].addEventListener(MouseEvent.CLICK,onButtonClick);
					}
					
				}
				MaxBtn.enabled = true ;
				MaxBtn.addEventListener(MouseEvent.CLICK,onButtonClick);
				
				sureBtn.addEventListener(MouseEvent.CLICK,onEnterBtnHandler);
				cancleBtn.addEventListener(MouseEvent.CLICK,onEnterBtnHandler);
			}
			
			private function getAddNumStr(num:Number):String
			{
				if(num < 1 && num > 0)	return num.toFixed(1);
				return num.toFixed(0);
			}
			
			private function HideButton() : void
			{
				control1.visible = false;
				control2.visible = false;
				control3.visible = false;
			}
			private function onButtonClick(e : MouseEvent) : void
			{
				//				CCModel._getInstance().m_Sound.PlayEffect(TConst.INVALID_CHAIR,'movebutton');
//				playSoundEffect(TConst.INVALID_CHAIR,'movebutton');
				switch(e.currentTarget.id)
				{
					case 'Add_1':
					{
						AddScoreHandler(1);
						break;
					}
					case 'Add_2':
					{
						AddScoreHandler(2);
						break;
					}
					case 'Add_3':
					{
						AddScoreHandler(3);
						break;
					}
					case 'Add_4':
					{
						AddScoreHandler(4);
						break;
					}
					case 'Add_5':
					{
						AddScoreHandler(5);
						break;
					}
					case 'MaxBtn':
					{
						AddScoreHandler(6);
						break;
					}
					case 'Btn_1':
					{
						SendCallBanker(false);
						HideButton();
						break;
					}
					case 'Btn_2':
					{
						SendCallBanker(true);
						HideButton();
						break;
					}
					case 'Btn_3':
					{
						SendOutCard();
						HideButton();
						break;
					}
					case 'Btn_4':
					{
						NoticeCard();
						return;
					}
						
				}
			}
			private function onEnterBtnHandler(e : MouseEvent) : void
			{
				switch(e.currentTarget.id)
				{
					case 'sureBtn':
					{
						HideButton();
						SendScore(_addChipNum);
						break;
					}
					case 'cancleBtn':
					{
						cancleBtnHander();
						break;
					}
				}
			}
			private function cancleBtnHander() : void
			{
				for(var i : int = 1 ; i < 6 ; i++)
				{
					this['Add_'+i].enabled = true;
				}
				MaxBtn.enabled = true
				_addChipNum = CCModel._getInstance().m_lTurnLessScore;
				control3_txt.text = '最大可下注：'+TScore.toStringEx(_theModel.m_upperLimit) + 
					' , 默认下注：'  + TScore.toStringEx(_theModel.m_lTurnLessScore);
			}
			private function AddScoreHandler(index : uint) : void
			{
				var score : Number = 0 ;
				var i :int;
				if(index > 0 && index < 6)
				{
					_addChipNum += CCModel._getInstance().m_lTurnLessScore * _chipBtnNumber[index - 1];
					
					for(i = 5 ; i >=1  ; i--)
					{
						score = CCModel._getInstance().m_lTurnLessScore * _chipBtnNumber[i - 1];
						if(_addChipNum + score <= _theModel.m_upperLimit)
						{
							this['Add_'+i].enabled = true;
							
						} else {
							
							this['Add_'+i].enabled = false;
						}
						if(_addChipNum >= _theModel.m_upperLimit)
						{
							_addChipNum = _theModel.m_upperLimit;
							MaxBtn.enabled = false;
						}
					}
					
				}
				if(index >= 6)
				{
					for(i = 1 ; i < 6; i++)
					{
						this['Add_'+i].enabled = false;
					}
					MaxBtn.enabled = false;
					_addChipNum = _theModel.m_upperLimit;
				}
				
				control3_txt.text = '最大可下注：'+TScore.toStringEx(_theModel.m_upperLimit) + 
					' , 当前下注：'  + TScore.toStringEx(_addChipNum);
				//				sureBtn.addEventListener(MouseEvent.CLICK,onEnterBtnHandler);
				//				cancleBtn.addEventListener(MouseEvent.CLICK,onEnterBtnHandler);
			}
			
			private function SendScore(score : Number) : void
			{
				var SendScore : CMD_C_AddScore = new CMD_C_AddScore();
				SendScore.lScore = score;
				CCModel._getInstance().m_Tcp.SendData(GameCmd.MDM_GF_GAME,CowcowCMD.SUB_C_ADD_SCORE,SendScore.toByArray(),SendScore.size);
				return;
			}
			
			private function SendCallBanker(bGive : Boolean) : void
			{
				var SendCallBank : CMD_C_CallBanker = new CMD_C_CallBanker();
				SendCallBank.bBanker = bGive?0:1;
				CCModel._getInstance().m_Tcp.SendData(GameCmd.MDM_GF_GAME,CowcowCMD.SUB_C_CALL_BANKER,SendCallBank.toByArray(),SendCallBank.size);
			}
			
			private function SendOutCard() : void
			{
				var OutCard : CMD_C_OxCard = new CMD_C_OxCard();
				var obj:Object = NoticeCard();
				OutCard.bOX = obj.type;
				OutCard.cbCardData = obj.ary;
				CCModel._getInstance().m_Tcp.SendData(GameCmd.MDM_GF_GAME,CowcowCMD.SUB_C_OPEN_CARD,OutCard.toByArray(),OutCard.size);
			}
			
			private function ArySort(a:int, b:int):int
			{
				var val1:int = GetCardValue(a);
				var val2:int = GetCardValue(b);
				if(val1>val2)
					return -1;
				else if(val1 == val2)
					return a>b?-1:1;
				return 1;
			}
			
			private function NoticeCard():Object
			{
				Btn_4.visible = false;
				
				var arr : Array = new Array();
				for( var i:int = 0;i<5;i++) 
				{
					arr.push(_handCards[2][i].value);
				}
				var _cardType:uint = GetCardType(arr, arr.length);
				if(_cardType > 0)
				{
					arr.sort(ArySort);
					GetOxCard(arr, arr.length);
					upNoticeCard([arr[0], arr[1]]);
				}
				
				gp_type.visible = true;
				type_num.source = CowcowSkinClass.GetCowType(_cardType);
				
				return {type:_cardType, ary:arr};
			}
			
			private function upNoticeCard(arr:Array):void
			{
				for(var m:int=0; m<2; m++)
				{
					for(var n:int=0; n<5; n++)
					{
						if(_handCards[2][n].value == arr[m])
						{
							_myBool = true;
							updateCardPosition(_handCards[2][n], 2, n, 30, 0);
							break;
						}
					}
				}
			}
			private function setGameStatus(statusIndex:int):void
			{
				lab_status.text = _statusAry[statusIndex];
				//gp_status.visible = true;
			}
			private function StartClock(wChairID : uint, time:Number):void
			{
				var repeat : uint = time / 1000;
				StopClock();
				_timer = new Timer(1000,repeat);
				_timer.addEventListener(TimerEvent.TIMER,onTimerEvent);
				_timer.start();
				theTime.text = repeat.toString();
//				time_image.source = getClockNum(repeat);
				gp_clock.visible = true;
			}
			
			private function onTimerEvent(e : TimerEvent) : void
			{
				var time : int = _timer.repeatCount - _timer.currentCount;
				if(int(theTime.text) == 1 && statusIndex == 1)
				{
					control1.visible = false;
				}
				if(time <= 0) {
					StopClock(); 
					return;
				}
				theTime.text = time > 9?time.toString() : ('0' + time);
//				time_image.source = getClockNum(time);
				if(Number(theTime.text) <= 5)
				{
					//					_theModel.m_Sound.PlayEffect(TConst.INVALID_CHAIR,'time');
					playSoundEffect(TConst.INVALID_CHAIR,'time');
				}
			}
			
			public function StopClock() : void
			{
				if(_timer) {
					_timer.stop();
					_timer.removeEventListener(TimerEvent.TIMER,onTimerEvent);
					_timer = null;
				}
				theTime.text = '00';
				gp_clock.visible = false;
			}
			
			private function GameEndSoundPlay() : void
			{
				//				CCModel._getInstance().m_Sound.PlayEffect(TConst.INVALID_CHAIR,'gameend');
				playSoundEffect(TConst.INVALID_CHAIR,'GameEnd');
			}
			private function updateClockPosition(clock:*, wViewChairID:uint, xoffset:int=0, yoffset:int=0):void
			{
				clock.top 				= undefined;
				clock.bottom 			= undefined;
				clock.left 				= undefined;
				clock.right 			= undefined;
				clock.horizontalCenter	= undefined;
				clock.verticalCenter 	= undefined;
				switch(wViewChairID)
				{
					case 0:
						clock.top = -10;
						clock.horizontalCenter = 160;
						break;
					case 1:
						clock.left = 30;
						clock.verticalCenter = -20;
						break;
					case 2:
						clock.bottom = 93;
						clock.horizontalCenter = -165;
						break;
					case 3:
						clock.right = 30;  
						clock.verticalCenter = -20;
						break;
				}
			}
			
			private function updateCardPosition(card:CardImage, wViewChairID:uint, index:int, xoffset:int=0, yoffset:int=0):void
			{
				card.top 				= undefined;
				card.bottom 			= undefined;
				card.left 				= undefined;
				card.right 				= undefined;
				card.horizontalCenter	= undefined;
				card.verticalCenter 	= undefined;
				
				switch(wViewChairID)
				{
					case 0:
						card.top = 60 + xoffset;
						card.horizontalCenter =  index*22 + yoffset - 30;
						break;
					case 1:
						card.left = 140 + index*22 + xoffset;
						card.verticalCenter = 10 + yoffset;
						break;
					case 2:
						if(_myBool)
						{
							card.bottom = 0 + xoffset;
							if(_myIndex == 0)
							{
								card.horizontalCenter = -5;
								_myArray.push(card);
							}
							else if(_myIndex == 1)
							{
								card.horizontalCenter = 15;
								_myArray.push(card);
								showMyCard();
							}
							card.depth = 1 + _myIndex;
							_myIndex++;
						}else
						{
							card.bottom = -30 + xoffset;
							card.horizontalCenter = -60 + index*30 + yoffset;
							card.depth = 5;
						}
						break;
					case 3:
						card.right = 210 - index*22 + xoffset;  
						card.verticalCenter = 10 + yoffset;
						break;
				}
			}
			private function showMyCard():void
			{
				var i:int = 0;
				var j:int = 0;
				for(i = 0;i<5;i++)
				{
					if(_handCards[2][i] != _myArray[0] && _handCards[2][i] != _myArray[1])
					{
						_handCards[2][i].horizontalCenter = -25 + _indexMy*25;
						_indexMy++;
					}
				}
			}
			public function GetCardType(cbCardData:Array, cbCardCount : uint) : uint
			{
				var  bKingCount : uint =0;
				var i : uint =0;
				for( i=0;i<cbCardCount;i++)
				{
					if(GetCardValue(cbCardData[i])>10)
					{
						bKingCount++;
					}
				}
				if(bKingCount==5) return OX_FOURKING;
				
				
				var bSameCardCount : uint = 0;
				for (i = 0;i<cbCardCount;i++)
				{
					for (var k:int = 0;k<cbCardCount;k++)
					{
						if (GetCardValue(cbCardData[i]) == GetCardValue(cbCardData[k]))
						{
							bSameCardCount++;
						}
					}
					
					//					if (bSameCardCount==4) 
					//						return OX_FOURSAME;
					//					else
					bSameCardCount = 0;
				}
				
				var bTemp : Array = Memory._newArrayAndSetValue(5,0);
				var bSum : uint =0;
				for ( i=0;i<cbCardCount;i++)
				{
					bTemp[i]=GetCardLogicValue(cbCardData[i]);
					bSum+=bTemp[i];
				}
				
				for ( i=0;i<cbCardCount-1;i++)
				{
					for (var j : uint=i+1;j<cbCardCount;j++)
					{
						if((bSum-bTemp[i]-bTemp[j])%10==0)
						{
							return ((bTemp[i]+bTemp[j])>10)?(bTemp[i]+bTemp[j]-10):(bTemp[i]+bTemp[j]);
						}
					}
				}
				return OX_VALUE0;
			}
			//获取牛牛
			public function GetOxCard(cbCardData : Array, cbCardCount : uint) : Boolean
			{
				//设置变量
				var bTemp : Array = Memory._newArrayAndSetValue(cbCardCount,0);
				var bTempData:Array = Memory._newArrayByCopy(cbCardData,cbCardCount);
				var bSum : uint = 0;
				var i : uint = 0;
				for ( i=0;i<cbCardCount;i++)
				{
					bTemp[i]=GetCardLogicValue(cbCardData[i]);
					bSum+=bTemp[i];
				}
				
				//查找牛牛
				for ( i=0;i<cbCardCount-1;i++)
				{
					for (var j : uint=i+1;j<cbCardCount;j++)
					{
						if((bSum-bTemp[i]-bTemp[j])%10==0)
						{
							var bCount : uint=2;
							for (var k : uint=0;k<cbCardCount;k++)
							{
								if(k!=i && k!=j)
								{
									cbCardData[bCount++] = bTempData[k];
								}
							}
							cbCardData[0] = bTempData[i];
							cbCardData[1] = bTempData[j];
							return true;
						}
					}
				}
				return false;
			}
			
			
			
			public function GetCardLogicValue(cbCardData : uint) : uint
			{
				//扑克属性
				var cbCardValue : uint = GetCardValue(cbCardData);
				return (cbCardValue>10)?(10):cbCardValue;
			}
			
			public function GetCardValue(cbCardData : uint) : uint
			{
				return cbCardData&MASK_VALUE; 
			}
			
			
			
			private function getObjcetProperties(obj:Object):String
			{
				var str:String = '';
				var ary:Array = ObjectUtil.getClassInfo(obj).properties;
				for(var i:int=0, leng:int=ary.length; i<leng; i++)
				{
					str += "---" + ary[i].localName + ":" + obj[ary[i].localName] + "  ";
				}
				return str;
			}
			
			private function cleanCards():void
			{
				var card : CardImage;
				for(var i : int = CowcowConst.GAME_PLAYER - 1 ; i >= 0 ; i-- )
				{
					for(var j:int = 0; j < 5; j++)
					{
						if( _handCards[i][j] != null)
						{
							card = _handCards[i][j];
							if(card && this.contains(card))
							{
								this.removeElement(card);
								_handCards[i][j] = null;
							}
						}
					}
				}
			}
			public function onDestroyAllDos():void
			{
				
				StopClock();
				cleanCards();
				
				m_endData = null;
				btn_continue.visible = false;
				_zhuang.visible = false;
				_endGame = false;
				for(var i:int=0; i<CowcowConst.GAME_PLAYER; i++)
				{
					this['type'    +i].source  = null;
					this['gp_score'+i].visible = false;
					this['score_' + i].setStyle('color', 0xCCCCCC);
					this['score_'  +i].text    = '';
				}
				
				if(!StaticVars.isTryPlayed)
				{
					tryplay.visible = false;
					tryplay1.visible= false;
				}
				
				lab_status.text = '';
				gp_status.visible = false;
				
				theServerNum.text 	= '';
				Btn_4.visible = true;
				
				gp_type.visible = false;
				type_num.source = null;
				playerExit = [];
				
				if(_theModel)
					_theModel.m_gameStart = false;
				theuser.Destroy();
				_user = null;
				_theModel = null;
				
				_myBool = false;
				_myIndex = 0;
				if(_myArray != null)
				{
					for(var j:int=_myArray.length-1;j>=0;j--)
					{
						_myArray[j] = null;
						_myArray.splice(j,1);
					}
					_myArray = new Array();
				}
				_indexMy = 0;
				statusIndex = 255;
			}
			
			
			protected function continue_clickHandler(event:MouseEvent):void
			{
				if(checkPlayed())	return;
				if(_chips != null)
				{
					for each(var chip : DisplayObject in _chips)
					{
						removeChip(chip);
					}
				}
				TweenMax.killAll();
				onDestroyAllDos();
				Controller.dispatchEvent(GameEvent.CONTINUE_GAME);
			}
			
			protected function updateZhuang(ID:int):void
			{
				_zhuang.top 				= undefined;
				_zhuang.bottom 			= undefined;
				_zhuang.left 				= undefined;
				_zhuang.right 				= undefined;
				_zhuang.horizontalCenter	= undefined;
				_zhuang.verticalCenter 		= undefined;
				_zhuang.visible = true;
				switch(ID)
				{
					case 0:
						_zhuang.top = -10;
						_zhuang.horizontalCenter = 130;
						break;
					case 1:
						_zhuang.left = 5;
						_zhuang.verticalCenter = -20;
						break;
					case 2:
						_zhuang.bottom = 93;
						_zhuang.horizontalCenter = -180;
						break;
					case 3:
						_zhuang.right = 80;  
						_zhuang.verticalCenter = -20;
						break;
				}
			}
			
			private function checkPlayed():Boolean
			{
				if(StaticVars.isTryPlayed && StaticVars.tryPlayScore < (_theModel.m_lTurnLessScore*100) )
				{
					Controller.dispatchEvent('gameModuleExit');
					
					MsgManager.getInstance().showMessage1('您的金币不足！请取金币！');
					return true;
				}
				return false;
			}
			
			public function changeBackground(val:int):void
			{
				if(val == 4)
					_bg.source = CowcowSkinClass.cow_bg4;
				else if(val == 3)
					_bg.source = CowcowSkinClass.cow_bg3;
				else if(val == 2)
					_bg.source = CowcowSkinClass.cow_bg2;
				else if(val == 1)
					_bg.source = CowcowSkinClass.cow_bg1;
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<s:Image horizontalCenter="3" verticalCenter="14" source="{CowcowSkinClass.cow_bg2}" id="_bg" visible="true"/>
	<s:Image horizontalCenter="3" verticalCenter="14" source="{CowcowSkinClass.cow_bg}"/>
	<s:Image horizontalCenter="8" verticalCenter="-43" source="{CowcowSkinClass.tryplay}" id="tryplay" visible="false"/>
	<s:Image horizontalCenter="25" verticalCenter="180" source="{CowcowSkinClass.tryplay1}" id="tryplay1" visible="false"/>
	
	<!--
	<s:Label id="_fd" fontSize="16" fontWeight="bold" color="#1D581A"
	horizontalCenter="0" verticalCenter="-155" text="牛牛"  />
	-->
	<cowcow:CowcowUserAir x="0" y="0" id="theuser" horizontalCenter="0" verticalCenter="0" width="100%" height="100%">
	</cowcow:CowcowUserAir>
	<mx:UIComponent id="_chipUI" width="360" height="200" horizontalCenter="0" verticalCenter="0"/>
	
	<s:Group id="gp_center" horizontalCenter="-30" verticalCenter="-54"/>
	<s:Group id="gp_user0" top="30" horizontalCenter="0"/>
	<s:Group id="gp_user1" left="200" verticalCenter="-54"/>
	<s:Group id="gp_user2" bottom="250" horizontalCenter="0"/>
	<s:Group id="gp_user3" right="250" verticalCenter="-54"/>
	
	
	
	<s:Image id="showCard0" visible="false" source="{CowcowSkinClass.tool_showcard}" top="110" depth="100" horizontalCenter="0"/>
	<s:Image id="showCard1" visible="false" source="{CowcowSkinClass.tool_showcard}" left="140" depth="100" verticalCenter="30"/>
	<s:Image id="showCard3" visible="false" source="{CowcowSkinClass.tool_showcard}" right="150" depth="100" verticalCenter="30"/>
	
	<s:Image id="type0" horizontalCenter="-10" top="90" depth="510"/>
	<s:Image id="type1" left="130" verticalCenter="45" depth="500"/>
	<s:Image id="type2" horizontalCenter="0" bottom="-35" depth="510"/>
	<s:Image id="type3" right="160" verticalCenter="45" depth="510"/>
	
	<com:GameRollText  horizontalCenter="-9" verticalCenter="-200" RollText="{StaticVars.gameRollTextStr}" visible="false" id="cow_rollText"/>
	<s:Label fontSize="14" color="#E4A705" fontFamily="宋体" fontWeight="bold" horizontalCenter="400" verticalCenter="-298" id="theServerName"/>
	<s:Label fontSize="14" color="#E4A705" fontFamily="宋体" horizontalCenter="0" verticalCenter="-150" id="theServerNum" />
	
	
	<s:Group id="gp_score0" width="83" height="32" horizontalCenter="10" top="190" visible="false">
		<s:Image source="{CowcowSkinClass.userscore_bg}" x="0" y="0"/>
		<s:Label id="score_0" color="#CCCCCC" fontSize="15" x="0" y="8" width="76" textAlign="center"/>
	</s:Group>
	<s:Group id="gp_score1" width="83" height="32" left="185" verticalCenter="100" visible="false">
		<s:Image source="{CowcowSkinClass.userscore_bg}" x="0" y="0"/>
		<s:Label id="score_1" color="#CCCCCC" fontSize="15" x="0" y="8" width="76" textAlign="center"/>
	</s:Group>
	<s:Group id="gp_score2" width="83" height="32" horizontalCenter="10" bottom="160" visible="false">
		<s:Image source="{CowcowSkinClass.userscore_bg}" x="0" y="0"/>
		<s:Label id="score_2" color="#CCCCCC" fontSize="15" x="0" y="8" width="76" textAlign="center"/>
	</s:Group>
	<s:Group id="gp_score3" width="83" height="32" right="145" verticalCenter="100" visible="false">
		<s:Image source="{CowcowSkinClass.userscore_bg}" x="0" y="0"/>
		<s:Label id="score_3" color="#CCCCCC" fontSize="15" x="0" y="8" width="76" textAlign="center"/>
	</s:Group>
	
	
	<s:Group id="gp_add0" width="57" height="65" visible="false" horizontalCenter="160" top="135">
		<s:Image x="0" y="0" source="{CowcowSkinClass.score_0}"/>
		<s:Label id="AddTxt_0" color="#FFFFFF" fontSize="15" x="0" y="8" width="80" height="34" textAlign="center"/>
	</s:Group>
	<s:Group id="gp_add1" width="60" height="57" visible="false" left="220" verticalCenter="110">
		<s:Image x="0" y="0" source="{CowcowSkinClass.score_1}"/>
		<s:Label id="AddTxt_1" color="#FFFFFF" fontSize="15" x="0" y="8" width="80" height="34" textAlign="center"/>
	</s:Group>
	<s:Group id="gp_add3" width="60" height="57" visible="false" right="220" verticalCenter="110">
		<s:Image x="0" y="0" source="{CowcowSkinClass.score_3}"/>
		<s:Label id="AddTxt_3" color="#FFFFFF" fontSize="15" x="0" y="8" width="80" height="34" textAlign="center"/>
	</s:Group>
	<s:Group id="gp_add2" width="77" height="88" visible="false" horizontalCenter="-155" bottom="50">
		<s:Image x="0" y="0" source="{CowcowSkinClass.score_2}"/>
		<s:Label id="AddTxt_2" color="#FFFFFF" fontSize="15" x="0" y="8" width="80" height="34" textAlign="center"/>
	</s:Group>
	
	
	<s:Group horizontalCenter="-155" verticalCenter="240" width="80" height="85" id="gp_clock" visible="false"  depth="500">
		<mx:UIComponent x="40" y="45" id="ui_clock"/>
		<s:Label x="27" y="34" color="#FFFFFF" fontSize="26" fontWeight="bold" text="20" id="theTime"/>
		<!--<s:Image x="10" y="22" id="time_image"/>-->
	</s:Group>
	
	<s:Group horizontalCenter="0" verticalCenter="50" width="255" height="50" id="gp_status" visible="false">
		<s:Image x="0" y="0" source="{CowcowSkinClass.status_bg}"/>
		<s:Label id="lab_status" x="0" y="10" width="255" color="#FFFFFF" fontFamily="宋体"
				 fontSize="24" fontWeight="bold" textAlign="center"/>
	</s:Group>
	
	<s:Group width="250" bottom="160" horizontalCenter="0" id="control1" visible="false">
		<com:MCButton x="0" y="-100" buttonMode="true" targetClass="{CowcowSkinClass.control_callbank}" id="Btn_1" click="onButtonClick(event)"/>
		<com:MCButton x="120" y="-100" buttonMode="true" targetClass="{CowcowSkinClass.control_callbankno}" id="Btn_2" click="onButtonClick(event)"/>
	</s:Group>
	
	<s:Group width="300" bottom="80" horizontalCenter="40" id="control2" visible="false">
		<com:MCButton x="0" y="-100" buttonMode="true" targetClass="{CowcowSkinClass.control_tooltip}" id="Btn_4" click="onButtonClick(event)"/>
		<com:MCButton x="130" y="-100" buttonMode="true" targetClass="{CowcowSkinClass.control_showcard}" id="Btn_3" click="onButtonClick(event)"/>
	</s:Group>
	
	<s:Group width="453" height="84" bottom="-20" horizontalCenter="390" id="control3" visible="false">
		<s:Image x="0" y="0" source="{CowcowSkinClass.addscore_bg1}"/>
		<s:Label x="30" y="-30" fontSize="14" color="#FFFF99" id="control3_txt" fontFamily="宋体"/>
		<cowcow:CowAddScore x="5" y="6" 	id="Add_1"/>
		<cowcow:CowAddScore x="73" y="6" 	id="Add_2"/>
		<cowcow:CowAddScore x="141" y="6"  id="Add_3"/>
		<cowcow:CowAddScore x="209" y="6"  id="Add_4"/>
		<cowcow:CowAddScore x="277" y="6"  id="Add_5"/>
		<com:GameMCButton x="5" y="48" targetClass="{CowcowSkinClass.maxBtn}" id="MaxBtn"  />
		<com:GameMCButton x="115" y="48" targetClass="{CowcowSkinClass.sureBtn}" id="sureBtn" />
		<com:GameMCButton x="225" y="48" targetClass="{CowcowSkinClass.cancleBtn}"  id="cancleBtn"/> 
	</s:Group>
	
	<s:Group bottom="10" horizontalCenter="-50" width="197" height="49" id="gp_type" depth="100" visible="false">
		<!--<s:Image id="type_bg" source="{CowcowSkinClass.user_type}" x="0" y="0"/>-->
		<s:Image id="type_num" x="76" y="-7"/>
	</s:Group>
	
	<s:Image id="_zhuang" source="{CowcowSkinClass.zhuang}" visible="false"/>
	
	<s:Image id="_nozhuang" source="{CowcowSkinClass.noZhuang}" visible="false" horizontalCenter="50" verticalCenter="120"/>
	
	<com:GameMCButton targetClass="{CowcowSkinClass.control_continue}" buttonMode="true" id="btn_continue" visible="false"
					  horizontalCenter="0" verticalCenter="0" click="continue_clickHandler(event)"/>
</base:GameBaseModule>
