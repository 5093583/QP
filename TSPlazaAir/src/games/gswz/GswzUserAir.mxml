<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:user="games.gswz.user.*"
		 width="800" height="600"
		 creationComplete="group1_creationCompleteHandler(event)" 
		 implements="cx.gamebase.Interface.IUserViewSink, cx.gamebase.Interface.IReadyGame, cx.gamebase.Interface.IDestroy">
	<fx:Script>
		<![CDATA[
			import cx.client.logon.model.UserModel;
			import cx.gamebase.events.GameEvent;
			import cx.gamebase.model.GameUserModel;
			import cx.gamebase.model.GlobalModel;
			import cx.gamebase.sturuct.tagUserInfoHead;
			
			import games.gswz.model.GswzModel;
			import games.gswz.units.GswzConst;
			
			import mx.events.FlexEvent;
			
			import t.cx.air.TConst;
			import t.cx.air.controller.Controller;
			import t.cx.air.controller.TEvent;
			import t.cx.air.utils.IDConvert;
			
			
			protected var _user : GameUserModel;
			
			public function init():void
			{
				_user = GameUserModel.GetInstance();
				Controller.addEventListener(GameEvent.USER_GAME_SCORE,onUserGameScore);
			}
			
			private function onUserGameScore(e : TEvent) : void
			{
				var wChairID : uint = e.nWParam;
				var lScore : Number = e.nLParam;
				var userInfo : tagUserInfoHead = _user.GetUserByChair(wChairID);
				if(userInfo != null)
				{
					userInfo.UserScoreInfo.lScore = lScore;
					UpdateGameScore(lScore,_user.SwitchViewChairID(wChairID));
				}
			}
			
			public function UpdateGameScore(score : Number,wViewChairID : uint) : void
			{
				if(wViewChairID == 2)
				{
//					var user : UserOther = this['UV_' + wViewChairID]; 
//					if(user != null) 
//					{ 
//						user.JinBi = score; 
//					}
					
					UV_2.JinBi = score;
				}
			}
			
			
			
			public function ReadyGameEvent(e:TEvent):Boolean
			{
				return true;
			}
			
			public function UpdateUserCome(userInfo:tagUserInfoHead, wViewChairID:uint):Boolean
			{
//				if(userInfo != null &&( userInfo.dwUserRight != 0 || userInfo.dwMasterRight != 0)) {
//					trace('玩家：'+IDConvert.Id2View(userInfo.dwUserID),userInfo.dwUserRight,userInfo.dwMasterRight);
//				}
				if(wViewChairID < GswzConst.GAME_PLAYER)			//如果用户座位ID不为0
				{
					var user : *;
					if(wViewChairID == 2)
						user = this['UV_' + wViewChairID] as UserSelf;
					else if(wViewChairID == 1 || wViewChairID == 3)
						user = this['UV_' + wViewChairID] as UserLeft;
					else if(wViewChairID == 0)
						user = this['UV_' + wViewChairID] as UserTopLeft;
					else if(wViewChairID == 4)
						user = this['UV_' + wViewChairID] as UserTopRight;
					if(user != null) 
					{
						if( userInfo.dwUserRight!=0 || userInfo.dwMasterRight!=0 )
						{
							user.userID = userInfo.dwUserID;
							GswzModel._getInstance().m_PlayerInfo[wViewChairID] = userInfo.dwUserID;
						}else{
							user.userID = IDConvert.Id2View(userInfo.dwUserID);
							GswzModel._getInstance().m_PlayerInfo[wViewChairID] = IDConvert.Id2View(userInfo.dwUserID);
						}
						user.IP = userInfo.ip;
//						user.Face = userInfo.wFaceID;
						user.Face = userInfo.cbGender;
						user.Offlie(0);
						user.visible = true;
						if(wViewChairID == 2) 
						{ 
							///GameFrame中sendUserInfoToGame函数发送自己消息
							user.JinBi = _user.GetSelfData().UserScoreInfo.lScore; 
						}
					}
				}
				return true;
			}
			
			public function UpdateUserScore(userID:int, wViewChairID:uint, fScore:Number):Boolean
			{
				if(wViewChairID == 2)
				{
					var user : UserSelf = this['UV_' + wViewChairID];
					if(user != null) {
						user.JinBi = _user.GetSelfData().UserScoreInfo.lScore; 
					}
				}
				return true;
			}
			
			public function UpdateUserStatus(userID:int, cbStatus:uint, wTableID:int, wViewChairID:uint):Boolean
			{
				if(cbStatus < TConst.US_SIT || cbStatus == TConst.US_LOOKON || wViewChairID == TConst.INVALID_CHAIR ) 
				{
					if(GlobalModel( GlobalModel.GetInstance() ).m_bReadyGame && _user.count == 1) {
						Controller.dispatchEvent('ready_leave');
						return true;
					}
				}
				
				if(cbStatus == TConst.US_FREE && wViewChairID != 2)
				{
					this['UV_' + wViewChairID].userLeave();
					return true;
				}
				
				var i : uint = 0;
				if(cbStatus == TConst.US_NULL && wTableID == TConst.INVALID_CHAIR 
					&& wViewChairID == TConst.INVALID_CHAIR && !GswzModel._getInstance().m_gameStart)
				{
					for(i=0; i<GswzConst.GAME_PLAYER; i++)
					{
						if(userID == GswzModel._getInstance().m_PlayerInfo[i])
						{
							this['UV_' + i].visible = false;
							break;
						}
					}
					
					var userNum:int = getUserCount();
					if(userNum < 2)
					{
						this.dispatchEvent( new Event( 'userLeave_notStart') );
					}
				}
				
				
				if(cbStatus < TConst.US_SIT || cbStatus == TConst.US_LOOKON || wViewChairID >= GswzConst.GAME_PLAYER ) return true;
				
				this['UV_' + wViewChairID].visible = true;
				if(cbStatus == TConst.US_OFFLINE)
				{
					this['UV_' + wViewChairID].Offlie(30000);
//					if(_user.SwitchViewChairID(ZjhModel._getInstance().wCurrentUser) == wViewChairID) { 
//						StopClock();
//					}
					return true;
				}
				if(cbStatus > TConst.US_FREE)
				{
					this['UV_' + wViewChairID].Offlie(0);
				}
				return true;
			}
			
			private function getUserCount():uint
			{
				var count:uint = 0;
				var i:int, wViewChairID:int;
				var _theModel:GswzModel = GswzModel._getInstance();
				for( i = 0; i<5;i++)
				{
					wViewChairID = _theModel.m_User.SwitchViewChairID(i);
					if(_theModel.m_PlayerInfo[wViewChairID] != 0 && _theModel.m_cbPlayerStatus[i] == 1) 
						count++;
				}
				return count;
			}
			
			public function Destroy():Boolean
			{
				Controller.removeEventListener(GameEvent.USER_GAME_SCORE,onUserGameScore);
				UV_0.visible = false;
				UV_1.visible = false;
				UV_2.visible = false;
				UV_3.visible = false;
				UV_4.visible = false;
//				_user.Destroy();
				_user = null;
				return true;
			}
			
			
			
			protected function group1_creationCompleteHandler(event:FlexEvent):void
			{	
				if(_user == null)	init();
			}
			
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	
	<user:UserTopLeft id="UV_0" left="240" verticalCenter="-255" visible="false"/>
	<user:UserLeft id="UV_1" left="20" verticalCenter="40" visible="false"/>
	<user:UserSelf id="UV_2" bottom="-40" horizontalCenter="-50" visible="false"/>
	<user:UserLeft id="UV_3" right="20" verticalCenter="40" visible="false"/>
	<user:UserTopRight id="UV_4" right="240" verticalCenter="-255" visible="false"/>
	
	
</s:Group>
