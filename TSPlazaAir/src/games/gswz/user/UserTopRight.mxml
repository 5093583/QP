<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 creationComplete="group1_creationCompleteHandler(event)" 
		 fontFamily="宋体" fontSize="14" color="#FFFFFF"
		 width="120" height="65">
	<fx:Script>
		<![CDATA[
			import base.SkinClass;
		
			import cx.ip.IPScannerNew;
			
			import gameAssets.gswz.GswzSkinClass;
			
			import mx.events.FlexEvent;
			
			protected function group1_creationCompleteHandler(event:FlexEvent):void
			{
				
			}
			
			
			
			private var _userid : int;
			public function set userID(val : int) : void
			{
				_userid = val;
				IDTxt.text = '游戏玩家';
				//				if(_userid == ZjhModel._getInstance().m_User.selfID)
				//				{
				//					SelfTxt.text = TScore.toStringEx(ZjhModel._getInstance().m_User.GetSelfData().UserScoreInfo.lScore);
				//				}
				
				_leave.visible = false;
				IDTxt.visible  = true;
			}
			
			public function get userID() : int
			{
				return _userid;
			}
			public function set IP(val : String) : void
			{
				IPTxt.text = IPScannerNew._getInstance().getIpnew(val);
				
				_leave.visible = false;
				IPTxt.visible  = true;
			}
			
			public function set JinBi(val : Number) : void
			{
				//				if(_userid == ZjhModel._getInstance().m_User.selfID)
				//				{
				//					SelfTxt.text = TScore.toStringEx(val);
				//				}
			}
			
			
			public function set Face(index : uint) : void
			{
				if(index == 2)
					head.source = SkinClass.hall_head_female_small;
				else
					head.source = SkinClass.hall_head_male_small;
				
			}
			
			
			
			private var _time : Timer;
			public function Offlie(timelen : int) : void
			{
				destroyTime();
				if(timelen > 0)
				{
					_time = new Timer(1000,timelen/1000);
					_time.addEventListener(TimerEvent.TIMER,onOfflieTime);
					_time.start();
					
					//					setChildIndex(OffLineTxt,this.numChildren-1);
					setElementIndex(OffLineTxt,this.numChildren-1);
					OffLineTxt.text = '断线' + _time.repeatCount;
					
					_leave.visible = false;
				}
			}
			
			private function onOfflieTime(e : TimerEvent) : void
			{
				OffLineTxt.text="断线" + (_time.repeatCount-_time.currentCount).toString();
				if(_time.repeatCount == _time.currentCount) { destroyTime(); }
			}
			private function destroyTime() : void
			{
				if(_time != null)
				{
					_time.reset();
					_time.removeEventListener(TimerEvent.TIMER,onOfflieTime);
					_time = null;
				}
				OffLineTxt.text = '';
			}
			
			public function userLeave():void
			{
				_leave.visible = true;
				IDTxt.visible  = false;
				IPTxt.visible  = false;
			}
			
			public function Destroy() : void
			{
				destroyTime();
			}
			
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
		<mx:GlowFilter id="glow"  blurX="5" blurY="5" strength="2.5" color="#000000" />
	</fx:Declarations>
	
	<s:Image x="55" y="0" source="{GswzSkinClass.user_head}"/>
	<s:Image x="61" y="6" id="head"/>
	
	<s:Label x="-70" y="15" width="120" id="IDTxt" textAlign="right"/>
	<s:Label x="-70" y="35" width="120" id="IPTxt" textAlign="right"/>
	
	<s:Label id="OffLineTxt"  color="0xFF0000" x="66" y="-25" width="80" fontSize="16" fontWeight="bold" textAlign="center"/>
	<s:Label x="63" y="20" text="离开" color="0xFFFFFF" fontFamily="微软雅黑" fontSize="25" fontWeight="bold" id="_leave" filters="{[glow]}"/>
	
</s:Group>
