<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 width="217" height="83"
		 fontFamily="宋体"
		 creationComplete="group1_creationCompleteHandler(event)">
	<fx:Script>
		<![CDATA[
			import base.SkinClass;
			import base.StaticVars;
			
			import cx.assembly.head.HeadEmbed;
			import cx.client.logon.model.UserModel;
			import cx.ip.IPScannerNew;
			
			import gameAssets.cow.CowcowSkinClass;
			
			import games.cowcow.model.CCModel;
			
			import mx.events.FlexEvent;
			
			import t.cx.air.TScore;
			
			private var headMC:MovieClip;
			
			protected function group1_creationCompleteHandler(event:FlexEvent):void
			{
//				addHeadStatus();
			}
			
//			private function addHeadStatus():void
//			{
//				if(!ui_head.numChildren)
//				{
//					headMC = new CowcowSkinClass.head_statusbg() as MovieClip;
//					ui_head.addChild(headMC);
//				}
//			}
			
			
			
			private var _userid : int;
			public function set userID(val : int) : void
			{
				_userid = val;
				IDTxt.text = 'ID：'+ val.toString();
				//IDTxt.text = UserModel._getInstance().selfInfo.szAccount;
				if(_userid == CCModel._getInstance().m_User.selfID)
				{
					SelfTxt.text = TScore.toStringEx(CCModel._getInstance().m_User.GetSelfData().UserScoreInfo.lScore);
					
					if(StaticVars.isTryPlayed)
						SelfTxt.text = TScore.toStringEx(StaticVars.tryPlayScore);
				}
			}
			public function get userID() : int
			{
				return _userid;
			}
			public function set IP(val : String) : void
			{
//				IPTxt.text = val;
//				var localIP : IPLocation = IPScanner._getInstance().Query(val);
//				IPTxt.text = localIP.country;
				IPTxt.text = IPScannerNew._getInstance().getIpnew(val);
			}
			public function set JinBi(val : Number) : void
			{
				if(_userid == CCModel._getInstance().m_User.selfID)
				{
					SelfTxt.text = TScore.toStringEx(val);
					
					if(StaticVars.isTryPlayed)
						SelfTxt.text = TScore.toStringEx(StaticVars.tryPlayScore);
				}
			}
			
			private var _time : Timer;
			public function Offlie(timelen : int) : void
			{
				destroyTime();
				if(timelen > 0)
				{
					_time = new Timer(1000,timelen/1000);
					_time.addEventListener(TimerEvent.TIMER,onOfflieTime);
					_time.start();
					
//					setChildIndex(OffLineTxt,this.numChildren-1);
					setElementIndex(OffLineTxt,this.numChildren-1);
					OffLineTxt.text = '断线' + _time.repeatCount;
				}
			}
			private var _bitmap : Bitmap;
			public function set Face(index : uint) : void
			{
				if(index == 2)
					head.source = SkinClass.hall_head_female_small;
				else
					head.source = SkinClass.hall_head_male_small;
				
//				if(!headMC)
////					addHeadStatus();
//				headMC.gotoAndStop(2); 
				
//				if(_bitmap != null)
//				{
//					if(this.contains(_bitmap))
//					{
//						this.removeChild(_bitmap);
//					}
//					_bitmap.bitmapData.dispose();
//					_bitmap = null;
//				}
//				_bitmap = HeadEmbed.EmbedHead(index);
//				if(_bitmap)
//					_bitmap.width = _bitmap.height = 76;
//				if(GswzModel._getInstance().m_User._selfID == userID)
//				{
//					_bitmap.x = 15;
//					_bitmap.y = 40;
//					
//				}else {
//					_bitmap.x = 20;
//					_bitmap.y = 10;
//				}
//				this.addChild(_bitmap);
//				this.addElement(_bitmap);
//				if(_bitmap)
//					head.source = _bitmap;
			}
			
			private function onOfflieTime(e : TimerEvent) : void
			{
				OffLineTxt.text="断线" + (_time.repeatCount-_time.currentCount).toString();
				if(_time.repeatCount == _time.currentCount) { destroyTime(); }
			}
			private function destroyTime() : void
			{
				if(_time != null)
				{
					_time.reset();
					_time.removeEventListener(TimerEvent.TIMER,onOfflieTime);
					_time = null;
				}
				OffLineTxt.text = '';
			}
			public function Destroy() : void
			{
//				destroyTime();
//				if(_bitmap)
//				{
//					if(this.contains(_bitmap)) { this.removeChild(_bitmap); }
//					_bitmap.bitmapData.dispose();
//					_bitmap = null;
//				}
//				this['IDTxt'] = null;
//				this['IPTxt'] = null;
//				this['OffLineTxt'] = null;
//				if(this.hasOwnProperty('SelfTxt'))
//				{
//					this['SelfTxt'] = null;
//				}
//				var dos : DisplayObject;
//				while(numChildren > 0)
//				{
//					dos = this.removeChildAt(0);
//					dos = null;
//				}
			}
			
			
			
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<s:Image x="0" y="0" source="{CowcowSkinClass.user_bg3}"/>
	<!--
	<s:Group x="15" y="8" id="head_mask">
		<s:Ellipse width="66" height="66">
			<s:fill>
				<s:SolidColor color="0xcccccc"/>
			</s:fill>
		</s:Ellipse>
	</s:Group>
	-->
	<mx:UIComponent x="0" y="0" id="ui_head"/>
	
	<s:Image x="6.5" y="8" id="head"/>
	<s:Label id="OffLineTxt"  color="0xFF0000" x="0" y="-20" width="80" fontSize="16" fontWeight="bold" textAlign="center"/>
	<s:Label id="IDTxt" x="0" y="80" color="#FFFFFF"/>
	<s:Label id="IPTxt" x="0" y="100" color="#FFFFFF"/>
	<s:Label id="SelfTxt" x="0" y="120" color="#F1E9C4"/>
	<s:Image x="-20" y="120" source="{CowcowSkinClass.user_score}"/>
	
	
</s:Group>
