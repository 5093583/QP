#ifndef CX_TCPENCRYPT_HEAD_FILE
#define CX_TCPENCRYPT_HEAD_FILE

/************************************************************************/
/*  通信加密类                                                 */
/************************************************************************/
typedef unsigned char	BYTE;
typedef unsigned short	WORD;
typedef unsigned long	DWORD;

#define CMDHEAD_SIZE					8							//头命令大小
#define DWORD_SIZE						4							//DWORD 类型大小
#define INFO_SIZE						4							//CMD_Info类型大小

#define SOCKET_VER						0x01						//数据包版本定义
#define SOCKET_BUFFER					8192						//数据包大小
#define SOCKET_PACKET					(SOCKET_BUFFER-sizeof(CMD_Head)-2*sizeof(DWORD))			//数据包缓存大小

struct CMD_Info
{
	BYTE								cbVersion;					//校验字段
	BYTE								cbCheckCode;				//版本标识
	WORD								wPacketSize;				//数据大小
};
//数据包命令信息
struct CMD_Command 
{
	WORD								wMainCmdID;					//主码命令
	WORD								wSubCmdID;					//子命令码
};
//数据包传递的包头
struct CMD_Head 
{
	CMD_Info							CmdInfo;					//基础结构
	CMD_Command							CommandInfo;				//命令信息
};
//网络数据包缓冲
struct CMD_Buffer 
{
	CMD_Head							Head;
	BYTE								cbBuffer[SOCKET_PACKET];
};

//发送字节映射表
const BYTE g_SendByteMap[256]=				
{
	0x99,0xe9,0x0a,0x40,0x60,0xbd,0xbb,0xce,0xb9,0xc8,0xc7,0x9c,0x3f,0x56,0xd1,0xf2,
	0xa8,0x20,0x6b,0xf7,0xb7,0x2c,0x31,0x4c,0x32,0x37,0xd5,0xe5,0x2f,0x74,0x55,0xf3,
	0x92,0xbc,0xcf,0x70,0x01,0xc1,0x69,0x4a,0xfe,0x46,0xe7,0x50,0xa7,0x1a,0x5e,0xa3,
	0x0b,0xaf,0x7b,0x13,0x63,0x24,0x87,0x07,0xf6,0xa5,0x49,0x06,0x5c,0x10,0x11,0x7a,
	0x4b,0x88,0xc2,0x3e,0xfd,0x1d,0x43,0x83,0x65,0x8c,0x76,0xb3,0x6c,0x9f,0x48,0xe0,
	0xe4,0xff,0xe2,0x90,0x82,0xc6,0x36,0x2b,0xf1,0x3a,0x75,0xa6,0x8e,0x0e,0x19,0x21,
	0x9e,0xc3,0x73,0x17,0xee,0x8a,0x9b,0x7d,0x80,0x0c,0xc4,0x96,0xb8,0x59,0xac,0x14,
	0x93,0xcc,0xf4,0xc9,0x5a,0xad,0x79,0x61,0xd7,0x77,0xd6,0xf0,0xf8,0x38,0x95,0x58,
	0x6e,0x4f,0xda,0x42,0x28,0x02,0x26,0xa1,0x72,0x8d,0x5d,0x2a,0xa2,0x85,0xc5,0x66,
	0x33,0x44,0x0d,0xdb,0xb4,0xca,0xe1,0x89,0x25,0x05,0x1e,0xf9,0x3b,0xae,0x7f,0x5f,
	0xaa,0x41,0xb2,0x57,0xe3,0x27,0xcd,0x51,0x94,0x04,0x7e,0xe6,0x2e,0xe8,0xb5,0x5b,
	0xba,0x9a,0xcb,0x54,0xb1,0x08,0x22,0x2d,0x09,0x71,0x12,0xdd,0x64,0x15,0x39,0x3c,
	0xb0,0x34,0xa9,0xea,0x97,0x23,0x62,0x6a,0x52,0xd8,0x03,0x1c,0xef,0xde,0xd0,0x8f,
	0xec,0x4e,0xd4,0x67,0x35,0xa0,0xd3,0x81,0xb6,0x7c,0xfb,0x4d,0x47,0x86,0x9d,0x68,
	0xfa,0x6f,0x0f,0x3d,0x6d,0x1b,0x78,0x18,0x98,0xfc,0xd9,0x00,0x84,0xab,0xbf,0x16,
	0xf5,0x29,0xeb,0x45,0x53,0x1f,0xd2,0xed,0xbe,0x30,0xdf,0xa4,0x8b,0x91,0xc0,0xdc
};
//接收字节映射表
const BYTE g_RecvByteMap[256]=				
{
	0xeb,0x24,0x85,0xca,0xa9,0x99,0x3b,0x37,0xb5,0xb8,0x02,0x30,0x69,0x92,0x5d,0xe2,
	0x3d,0x3e,0xba,0x33,0x6f,0xbd,0xef,0x63,0xe7,0x5e,0x2d,0xe5,0xcb,0x45,0x9a,0xf5,
	0x11,0x5f,0xb6,0xc5,0x35,0x98,0x86,0xa5,0x84,0xf1,0x8b,0x57,0x15,0xb7,0xac,0x1c,
	0xf9,0x16,0x18,0x90,0xc1,0xd4,0x56,0x19,0x7d,0xbe,0x59,0x9c,0xbf,0xe3,0x43,0x0c,
	0x03,0xa1,0x83,0x46,0x91,0xf3,0x29,0xdc,0x4e,0x3a,0x27,0x40,0x17,0xdb,0xd1,0x81,
	0x2b,0xa7,0xc8,0xf4,0xb3,0x1e,0x0d,0xa3,0x7f,0x6d,0x74,0xaf,0x3c,0x8a,0x2e,0x9f,
	0x04,0x77,0xc6,0x34,0xbc,0x48,0x8f,0xd3,0xdf,0x26,0xc7,0x12,0x4c,0xe4,0x80,0xe1,
	0x23,0xb9,0x88,0x62,0x1d,0x5a,0x4a,0x79,0xe6,0x76,0x3f,0x32,0xd9,0x67,0xaa,0x9e,
	0x68,0xd7,0x54,0x47,0xec,0x8d,0xdd,0x36,0x41,0x97,0x65,0xfc,0x49,0x89,0x5c,0xcf,
	0x53,0xfd,0x20,0x70,0xa8,0x7e,0x6b,0xc4,0xe8,0x00,0xb1,0x66,0x0b,0xde,0x60,0x4d,
	0xd5,0x87,0x8c,0x2f,0xfb,0x39,0x5b,0x2c,0x10,0xc2,0xa0,0xed,0x6e,0x75,0x9d,0x31,
	0xc0,0xb4,0xa2,0x4b,0x94,0xae,0xd8,0x14,0x6c,0x08,0xb0,0x06,0x21,0x05,0xf8,0xee,
	0xfe,0x25,0x42,0x61,0x6a,0x8e,0x55,0x0a,0x09,0x73,0x95,0xb2,0x71,0xa6,0x07,0x22,
	0xce,0x0e,0xf6,0xd6,0xd2,0x1a,0x7a,0x78,0xc9,0xea,0x82,0x93,0xff,0xbb,0xcd,0xfa,
	0x4f,0x96,0x52,0xa4,0x50,0x1b,0xab,0x2a,0xad,0x01,0xc3,0xf2,0xd0,0xf7,0x64,0xcc,
	0x7b,0x58,0x0f,0x1f,0x72,0xf0,0x38,0x13,0x7c,0x9b,0xe0,0xda,0xe9,0x44,0x28,0x51
};
//映射发送数据
BYTE MapSendByte(BYTE const cbData);
//映射接收数据
BYTE MapRecvByte(BYTE const cbData);
#endif